// Temporary in-memory storage
const userGardens = {};

const cropData = {
Â  carrot: { growTime: 2, yield: 3 },
Â  tomato: { growTime: 3, yield: 5 },
Â  potato: { growTime: 2, yield: 4 }
};

module.exports.config = {
Â  name: 'cassgarden',
Â  version: '1.0.0',
Â  hasPermission: 0,
Â  usePrefix: true,
Â  aliases: ['farm'],
Â  description: 'Grow a simple garden (no database)',
Â  usages: 'garden [action]',
Â  credits: 'ChatGPT',
Â  cooldowns: 2
};

module.exports.run = async function({ api, event, args }) {
Â  const userID = event.senderID;
Â  const action = args[0]?.toLowerCase();

Â  // Create garden if not exist
Â  if (!userGardens[userID]) {
Â  Â  userGardens[userID] = {
Â  Â  Â  garden: [],
Â  Â  Â  inventory: {},
Â  Â  Â  watered: false
Â  Â  };
Â  }

Â  const data = userGardens[userID];

Â  switch (action) {
Â  Â  case 'plant': {
Â  Â  Â  const seed = args[1]?.toLowerCase();
Â  Â  Â  if (!cropData[seed]) {
Â  Â  Â  Â  return api.sendMessage(`ðŸŒ¾ Unknown crop.\nAvailable: ${Object.keys(cropData).join(', ')}`, event.threadID);
Â  Â  Â  }

Â  Â  Â  data.garden.push({
Â  Â  Â  Â  type: seed,
Â  Â  Â  Â  stage: 0,
Â  Â  Â  Â  watered: false
Â  Â  Â  });

Â  Â  Â  return api.sendMessage(`ðŸª´ You planted ${seed}! Donâ€™t forget to water it.`, event.threadID);
Â  Â  }

Â  Â  case 'water': {
Â  Â  Â  if (data.garden.length === 0) return api.sendMessage("ðŸš« Nothing to water.", event.threadID);

Â  Â  Â  data.garden.forEach(crop => {
Â  Â  Â  Â  if (!crop.watered) crop.watered = true;
Â  Â  Â  });

Â  Â  Â  return api.sendMessage("ðŸ’§ You watered your garden!", event.threadID);
Â  Â  }

Â  Â  case 'grow': {
Â  Â  Â  if (data.garden.length === 0) return api.sendMessage("ðŸŒ± Nothing is growing yet.", event.threadID);

Â  Â  Â  let grown = 0;
Â  Â  Â  data.garden.forEach(crop => {
Â  Â  Â  Â  if (crop.watered && crop.stage < cropData[crop.type].growTime) {
Â  Â  Â  Â  Â  crop.stage++;
Â  Â  Â  Â  Â  crop.watered = false;
Â  Â  Â  Â  Â  grown++;
Â  Â  Â  Â  }
Â  Â  Â  });

Â  Â  Â  return api.sendMessage(`ðŸŒž ${grown} crops have grown a stage!`, event.threadID);
Â  Â  }

Â  Â  case 'harvest': {
Â  Â  Â  let harvested = 0;

Â  Â  Â  data.garden = data.garden.filter(crop => {
Â  Â  Â  Â  if (crop.stage >= cropData[crop.type].growTime) {
Â  Â  Â  Â  Â  const yieldAmount = cropData[crop.type].yield;
Â  Â  Â  Â  Â  data.inventory[crop.type] = (data.inventory[crop.type] || 0) + yieldAmount;
Â  Â  Â  Â  Â  harvested++;
Â  Â  Â  Â  Â  return false; // remove
Â  Â  Â  Â  }
Â  Â  Â  Â  return true;
Â  Â  Â  });

Â  Â  Â  return api.sendMessage(`ðŸŒ¾ Harvested ${harvested} crop(s)!`, event.threadID);
Â  Â  }

Â  Â  case 'collect': {
Â  Â  Â  const inv = Object.entries(data.inventory).map(([item, count]) => `ðŸ“¦ ${item}: ${count}`).join('\n') || "Empty inventory.";
Â  Â  Â  return api.sendMessage(`ðŸŽ’ Inventory:\n${inv}`, event.threadID);
Â  Â  }

Â  Â  case 'show': {
Â  Â  Â  if (data.garden.length === 0) return api.sendMessage("ðŸŒ± Your garden is empty.", event.threadID);

Â  Â  Â  const view = data.garden.map((crop, i) =>
Â  Â  Â  Â  `#${i + 1}: ${crop.type} | Stage: ${crop.stage}/${cropData[crop.type].growTime} | ${crop.watered ? 'ðŸ’§ Watered' : 'ðŸŒµ Dry'}`
Â  Â  Â  ).join('\n');

Â  Â  Â  return api.sendMessage(`ðŸŒ» Your garden:\n${view}`, event.threadID);
Â  Â  }

Â  Â  case 'clear': {
Â  Â  Â  data.garden = [];
Â  Â  Â  return api.sendMessage("ðŸ§¹ Your garden has been cleared.", event.threadID);
Â  Â  }

Â  Â  default:
Â  Â  Â  return api.sendMessage(
Â  Â  Â  Â  `ðŸŒ¿ Garden Commands:\n` +
Â  Â  Â  Â  `â€¢ garden plant [carrot/tomato/potato]\n` +
Â  Â  Â  Â  `â€¢ garden water\n` +
Â  Â  Â  Â  `â€¢ garden grow\n` +
Â  Â  Â  Â  `â€¢ garden harvest\n` +
Â  Â  Â  Â  `â€¢ garden collect\n` +
Â  Â  Â  Â  `â€¢ garden show\n` +
Â  Â  Â  Â  `â€¢ garden clear`, event.threadID);
Â  }
};
